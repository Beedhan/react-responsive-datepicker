{"version":3,"sources":["../../src/DatePicker.tsx","App.tsx","index.tsx"],"names":["DAY_NAMES","MONTH_NAMES","MAX_YEAR","Date","getFullYear","React","isOpen","showTitle","colorScheme","headerTextColor","closeText","clearText","onChange","dayNames","monthNames","defaultValue","dbRef","lbRef","changeMonth","inc","curMonth","month","curYear","setMonth","setYear","firstDayThisMonth","year","temp","i","date","setCalendar","setIsOpen","className","styles","darkbox","ref","lightbox","header","style","backgroundColor","color","title","monthName","backup","dayName","days","selectedDate","dateNum","months","monthNum","monthWithZero","result","headerFormat","getHeader","nav","selector","e","parseInt","value","key","index","Array","prevNext","navButton","onClick","width","height","xmlns","fill","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","body","day","calendar","setSelectedDate","selectDate","footer","disabled","setTimeout","onClose","App","useState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b82b31ca.chunk.js","sourcesContent":["/* eslint-disable no-unused-expressions */\nimport * as React from 'react'\nimport styles from './styles.module.css'\n\ninterface Props {\n  title?: string\n  dayNames?: string[]\n  monthNames?: string[]\n  showTitle?: boolean\n  defaultValue?: Date\n  headerFormat?: string\n  headerTextColor?: string\n  colorScheme?: string\n  isOpen?: boolean\n  closeText?: string\n  clearText?: string\n  onClose?: () => void\n  onChange?: (date: Date | null) => void\n}\n\nconst DAY_NAMES = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday'\n]\nconst MONTH_NAMES = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December'\n]\nconst OLD_YEAR = 1970\nconst MAX_YEAR = new Date().getFullYear() + 3\n\nconst DatePicker = ({\n  isOpen: showCalendar,\n  onClose,\n  title,\n  dayNames,\n  headerFormat,\n  showTitle = true,\n  monthNames,\n  defaultValue,\n  colorScheme = '#4527A0',\n  headerTextColor = '#fff',\n  closeText = 'Close',\n  clearText = 'Clear',\n  onChange\n}: Props) => {\n  const [isOpen, setIsOpen] = React.useState(showCalendar)\n  const [calendar, setCalendar] = React.useState<Date[]>([])\n  const [days] = React.useState<string[]>(\n    dayNames?.length === 7 ? dayNames : DAY_NAMES\n  )\n  const [months] = React.useState<string[]>(\n    monthNames?.length === 12 ? monthNames : MONTH_NAMES\n  )\n  const [month, setMonth] = React.useState<number>(\n    defaultValue ? defaultValue.getMonth() : new Date().getMonth()\n  )\n  const [year, setYear] = React.useState<number>(\n    defaultValue ? defaultValue.getFullYear() : new Date().getFullYear()\n  )\n  const [selectedDate, setSelectedDate] = React.useState<Date | null>(null)\n  const dbRef = React.useRef<HTMLDivElement>(null)\n  const lbRef = React.useRef<HTMLDivElement>(null)\n  const changeMonth = (inc: number) => {\n    let curMonth = month + inc\n    let curYear = year\n\n    if (curMonth === 12) {\n      curMonth = 0\n      curYear++\n    } else if (curMonth === -1) {\n      curMonth = 11\n      curYear--\n    }\n\n    setMonth(curMonth)\n    setYear(curYear)\n  }\n\n  const selectDate = (day: Date) => {\n    setMonth(day.getMonth())\n    setYear(day.getFullYear())\n    // setDate(day.getDate())\n    setSelectedDate(day)\n\n    onChange && onChange(day)\n  }\n\n  const getHeader = () => {\n    const backup = new Date()\n    const dayName = days[selectedDate?.getDay() || backup.getDay()]\n    const dateNum = selectedDate ? selectedDate.getDate() : backup.getDate()\n    const date = dateNum < 10 ? `0${dateNum}` : dateNum.toString()\n    const monthName = months[selectedDate?.getMonth() || backup.getMonth()]\n    const monthNum =\n      (selectedDate ? selectedDate.getMonth() : backup.getMonth()) + 1\n    const monthWithZero = monthNum < 10 ? `0${monthNum}` : monthNum.toString()\n    let result = headerFormat || 'DD, MM dd'\n\n    result = result.replaceAll('D', '_D')\n    result = result.replaceAll('M', '_M')\n    result = result.replaceAll('d', '_d')\n    result = result.replaceAll('m', '_m')\n\n    result = result.replaceAll('_D_D', dayName)\n    result = result.replaceAll('_D', dayName.substring(0, 3))\n    result = result.replaceAll('_M_M', monthName)\n    result = result.replaceAll('_M', monthName.substring(0, 3))\n    result = result.replaceAll('_m_m', monthWithZero)\n    result = result.replaceAll('_m', monthNum.toString())\n    result = result.replaceAll('_d_d', date)\n    result = result.replaceAll('_d', date.replace(/^0/, ''))\n\n    return result\n  }\n\n  const handleClear = () => {\n    setSelectedDate(null)\n    onChange && onChange(null)\n  }\n\n  const handleClose = () => {\n    // setIsOpen(false)\n    dbRef.current?.classList.add(styles.fadeOut)\n    lbRef.current?.classList.add(styles.zoomOut)\n\n    setTimeout(() => {\n      setIsOpen(false)\n      onClose && onClose()\n      dbRef.current?.classList.remove(styles.fadeOut)\n      lbRef.current?.classList.remove(styles.zoomOut)\n    }, 300)\n  }\n\n  React.useEffect(() => {\n    const firstDayThisMonth = new Date(year, month, 1).getDay()\n    const temp = []\n\n    for (let i = 0; i < 42; i++) {\n      const date = new Date(year, month, i - firstDayThisMonth + 1)\n      temp.push(date)\n    }\n\n    setCalendar(temp)\n  }, [month, year])\n\n  React.useEffect(() => {\n    setIsOpen(showCalendar)\n  }, [showCalendar])\n\n  if (!isOpen) {\n    return null\n  }\n\n  return (\n    <div className={styles.darkbox} ref={dbRef}>\n      <div className={styles.lightbox} ref={lbRef}>\n        <div\n          className={styles.header}\n          style={{\n            backgroundColor: colorScheme,\n            color: headerTextColor\n          }}\n        >\n          {showTitle && (\n            <h4 className={styles.title}>{title || 'Select Date'}</h4>\n          )}\n          <span className={styles.monthName}>{getHeader()}</span>\n          <br />\n          <span className={styles.year}>\n            {selectedDate ? selectedDate.getFullYear() : year}\n          </span>\n        </div>\n\n        <div className={styles.nav}>\n          <div className={styles.selector}>\n            <select\n              onChange={(e) => setMonth(parseInt(e.target.value))}\n              value={month}\n            >\n              {months.map((monthName, index) => (\n                <option key={index} value={index}>\n                  {monthName}\n                </option>\n              ))}\n            </select>\n            <select\n              onChange={(e) => setYear(parseInt(e.target.value))}\n              value={year}\n            >\n              {Array(MAX_YEAR - OLD_YEAR)\n                .fill(0)\n                .map((_, index) => (\n                  <option key={index} value={MAX_YEAR - index}>\n                    {MAX_YEAR - index}\n                  </option>\n                ))}\n            </select>\n          </div>\n          <div className={styles.prevNext}>\n            <button\n              className={styles.navButton}\n              onClick={() => changeMonth(-1)}\n            >\n              <svg\n                width={24}\n                height={24}\n                xmlns='http://www.w3.org/2000/svg'\n                className='h-6 w-6'\n                fill='none'\n                viewBox='0 0 24 24'\n                stroke='#888'\n                strokeWidth={2}\n              >\n                <path\n                  strokeLinecap='round'\n                  strokeLinejoin='round'\n                  d='M15 19l-7-7 7-7'\n                />\n              </svg>\n            </button>\n            <button\n              className={styles.navButton}\n              onClick={() => changeMonth(+1)}\n            >\n              <svg\n                width={24}\n                height={24}\n                xmlns='http://www.w3.org/2000/svg'\n                className='h-6 w-6'\n                fill='none'\n                viewBox='0 0 24 24'\n                stroke='#888'\n                strokeWidth={2}\n              >\n                <path\n                  strokeLinecap='round'\n                  strokeLinejoin='round'\n                  d='M9 5l7 7-7 7'\n                />\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        <div className={styles.body}>\n          <div className={styles.days}>\n            {days.map((day) => (\n              <div className={styles.day} key={day}>\n                {day.substring(0, 3)}\n              </div>\n            ))}\n          </div>\n          <div className={styles.calendar}>\n            {calendar.map((day, index) => (\n              <div\n                className={[\n                  styles.date,\n                  day.getMonth() === month ? styles.inside : styles.outside\n                ].join(' ')}\n                key={index}\n              >\n                <button\n                  style={{\n                    backgroundColor:\n                      selectedDate?.getTime() === day.getTime()\n                        ? colorScheme\n                        : '#fff',\n                    color:\n                      selectedDate?.getTime() === day.getTime()\n                        ? '#fff'\n                        : '#000'\n                  }}\n                  onClick={() => selectDate(day)}\n                >\n                  {day.getDate()}\n                </button>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className={styles.footer}>\n          <button\n            disabled={!selectedDate}\n            onClick={handleClear}\n            style={{ color: colorScheme }}\n          >\n            {clearText}\n          </button>\n          <button style={{ color: colorScheme }} onClick={handleClose}>\n            {closeText}\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default React.memo(DatePicker)\n","import React from 'react'\n\nimport { DatePicker } from 'react-responsive-datepicker'\nimport 'react-responsive-datepicker/dist/index.css'\n\nconst App = () => {\n  const [isOpen, setIsOpen] = React.useState(false)\n\n  return (\n    <div>\n      <button\n        onClick={() => {\n          setIsOpen(true)\n        }}\n      >\n        Open\n      </button>\n      <DatePicker\n        isOpen={isOpen}\n        onClose={() => setIsOpen(false)}\n        showTitle\n        headerFormat='DD, MM dd'\n      />\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}